{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This project aims to deliver a simple yet powerful CLI tool to ingest CWL Workflows and generate PlantUML diagrams.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install cwl2puml\n</code></pre> <p>or, for early adopters:</p> <pre><code>pip install --no-cache-dir git+https://github.com/Terradue/cwl2puml@main\n</code></pre>"},{"location":"#cli-execution","title":"CLI execution","text":"<pre><code>Usage: cwl2puml [OPTIONS] WORKFLOW\n\n  Converts a CWL, given its document model, to a PlantUML diagram.\n\n  Args:     `workflow` (`str`): The CWL workflow file (it can be an URL or a\n  file on the File System)     `workflow-id` (`str`): The ID of the main\n  Workflow to render     `output` (`Path`): The output file where streaming\n  the PlantUML diagram     `convert_image` (`bool`): Flag to ton on/off the\n  image generation (on, by default)     `puml_server` (`str`): The host of a\n  PlantUML as a service server (uml.planttext.com by default)\n  `image_format` (`ImageFormat`): The output image format of the PlantUML\n  diagram ('png' by default)\n\n  Returns:     `None`: none\n\nOptions:\n  --workflow-id TEXT        ID of the main Workflow  [required]\n  --output PATH             Output directory path  [required]\n  --convert-image BOOLEAN   Flag to ton on/off the image generation (on, by\n                            default)\n  --puml-server TEXT        The host of a PlantUML as a service server\n                            (uml.planttext.com by default)\n  --image-format [png|svg]  The output image format of the PlantUML diagram\n                            ('png' by default)\n  --help                    Show this message and exit.\n</code></pre> <p>i.e.</p> <pre><code>cwl2puml \\\n    --workflow-id main \\\n    --output . \\\n    --convert-image no \\\n    https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n</code></pre> <p>Output would be</p> <pre><code>2025-09-22 16:22:42.498 | DEBUG    | cwl_loader:load_cwl_from_location:213 - Loading CWL document from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl...\n2025-09-22 16:22:42.687 | DEBUG    | cwl_loader:_load_cwl_from_stream:216 - Reading stream from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl...\n2025-09-22 16:22:42.727 | DEBUG    | cwl_loader:load_cwl_from_stream:190 - CWL data of type &lt;class 'ruamel.yaml.comments.CommentedMap'&gt; successfully loaded from stream\n2025-09-22 16:22:42.727 | DEBUG    | cwl_loader:load_cwl_from_yaml:135 - No needs to update the Raw CWL document since it targets already the v1.2\n2025-09-22 16:22:42.727 | DEBUG    | cwl_loader:load_cwl_from_yaml:137 - Parsing the raw CWL document to the CWL Utils DOM...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:150 - Raw CWL document successfully parsed to the CWL Utils DOM!\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:152 - Dereferencing the steps[].run...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:70 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#stac must be externally imported...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:74 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:70 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_stack must be externally imported...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:74 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:70 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_warp_stack must be externally imported...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:74 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:70 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_color must be externally imported...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_on_process:74 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:159 - steps[].run successfully dereferenced! Now dereferencing the FQNs...\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:163 - CWL document successfully dereferenced!\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:166 - Sorting Process instances by dependencies....\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:load_cwl_from_yaml:168 - Sorting process is over.\n2025-09-22 16:22:43.285 | DEBUG    | cwl_loader:_load_cwl_from_stream:224 - Stream from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl successfully load!\n2025-09-22 16:22:43.286 | INFO     | cwl2puml.cli:main:66 - ------------------------------------------------------------------------\n2025-09-22 16:22:43.286 | INFO     | cwl2puml.cli:main:72 - Saving PlantUML activity diagram to activity.puml...\n2025-09-22 16:22:43.301 | SUCCESS  | cwl2puml.cli:main:83 - PlantUML activity diagram successfully rendered to activity.puml!\n2025-09-22 16:22:43.301 | INFO     | cwl2puml.cli:main:72 - Saving PlantUML component diagram to component.puml...\n2025-09-22 16:22:43.325 | SUCCESS  | cwl2puml.cli:main:83 - PlantUML component diagram successfully rendered to component.puml!\n2025-09-22 16:22:43.325 | INFO     | cwl2puml.cli:main:72 - Saving PlantUML class diagram to class.puml...\n2025-09-22 16:22:43.346 | SUCCESS  | cwl2puml.cli:main:83 - PlantUML class diagram successfully rendered to class.puml!\n2025-09-22 16:22:43.347 | INFO     | cwl2puml.cli:main:72 - Saving PlantUML sequence diagram to sequence.puml...\n2025-09-22 16:22:43.382 | SUCCESS  | cwl2puml.cli:main:83 - PlantUML sequence diagram successfully rendered to sequence.puml!\n2025-09-22 16:22:43.382 | INFO     | cwl2puml.cli:main:72 - Saving PlantUML state diagram to state.puml...\n2025-09-22 16:22:43.425 | SUCCESS  | cwl2puml.cli:main:83 - PlantUML state diagram successfully rendered to state.puml!\n2025-09-22 16:22:43.425 | INFO     | cwl2puml.cli:main:89 - Total time: 0.9278 seconds\n2025-09-22 16:22:43.426 | INFO     | cwl2puml.cli:main:90 - Finished at: 2025-09-22T16:22:43.425\n</code></pre> <p>then, for example, try to <code>cat ./activity.puml</code> :</p> <pre><code>/'\n ' Diagram generated by cwl2puml v0.23.0\n ' timestamp: 2025-09-22T16:22:43.301\n '/\n@startuml\nstart\n\nsplit\n\n    :stac-item; &lt;&lt;input&gt;&gt;\nsplit again\n\n    :epsg_code; &lt;&lt;input&gt;&gt;\nsplit again\n\n    :bands; &lt;&lt;input&gt;&gt;\nend split\n\nrepeat\n\n:step: step_curl\nCommandLineTool: stac;\n\nrepeat while (dotproduct step_curl/common_band_name)\n\nif ($( inputs.epsg_code == \"native\"))\n\n:step: step_stack\nCommandLineTool: rio_stack;\n\nendif\n\nif ($( inputs.epsg_code != \"native\"))\n\n:step: step_warp_stack\nCommandLineTool: rio_warp_stack;\n\nendif\n\n:step: step_color\nCommandLineTool: rio_color;\n\nsplit\n\n    :rgb-tif; &lt;&lt;output&gt;&gt;\nsplit again\n\n    :stack; &lt;&lt;output&gt;&gt;\nend split\n\nstop\n@enduml\n</code></pre>"},{"location":"examples/","title":"Simple Example","text":"In\u00a0[1]: Copied! <pre>import cwl_loader\n\ncwl_document = cwl_loader.load_cwl_from_location('https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl')\n</pre> import cwl_loader  cwl_document = cwl_loader.load_cwl_from_location('https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl') <pre>2025-09-24 07:48:01.000 | DEBUG    | cwl_loader:load_cwl_from_location:231 - Loading CWL document from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl...\n</pre> <pre>2025-09-24 07:48:01.089 | DEBUG    | cwl_loader:_load_cwl_from_stream:234 - Reading stream from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl...\n</pre> <pre>2025-09-24 07:48:01.112 | DEBUG    | cwl_loader:load_cwl_from_stream:206 - CWL data of type &lt;class 'ruamel.yaml.comments.CommentedMap'&gt; successfully loaded from stream\n</pre> <pre>2025-09-24 07:48:01.113 | DEBUG    | cwl_loader:load_cwl_from_yaml:146 - No needs to update the Raw CWL document since it targets already the v1.2\n</pre> <pre>2025-09-24 07:48:01.113 | DEBUG    | cwl_loader:load_cwl_from_yaml:148 - Parsing the raw CWL document to the CWL Utils DOM...\n</pre> <pre>2025-09-24 07:48:01.379 | DEBUG    | cwl_loader:load_cwl_from_yaml:161 - Raw CWL document successfully parsed to the CWL Utils DOM!\n</pre> <pre>2025-09-24 07:48:01.379 | DEBUG    | cwl_loader:load_cwl_from_yaml:163 - Dereferencing the steps[].run...\n</pre> <pre>2025-09-24 07:48:01.380 | DEBUG    | cwl_loader:_on_process:81 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#stac must be externally imported...\n</pre> <pre>2025-09-24 07:48:01.380 | DEBUG    | cwl_loader:_on_process:85 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n</pre> <pre>2025-09-24 07:48:01.381 | DEBUG    | cwl_loader:_on_process:81 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_stack must be externally imported...\n</pre> <pre>2025-09-24 07:48:01.381 | DEBUG    | cwl_loader:_on_process:85 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n</pre> <pre>2025-09-24 07:48:01.382 | DEBUG    | cwl_loader:_on_process:81 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_warp_stack must be externally imported...\n</pre> <pre>2025-09-24 07:48:01.382 | DEBUG    | cwl_loader:_on_process:85 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n</pre> <pre>2025-09-24 07:48:01.382 | DEBUG    | cwl_loader:_on_process:81 - Checking if https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl#rio_color must be externally imported...\n</pre> <pre>2025-09-24 07:48:01.383 | DEBUG    | cwl_loader:_on_process:85 - run_url: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl - uri: https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl\n</pre> <pre>2025-09-24 07:48:01.383 | DEBUG    | cwl_loader:load_cwl_from_yaml:170 - steps[].run successfully dereferenced! Dereferencing the FQNs...\n</pre> <pre>2025-09-24 07:48:01.384 | DEBUG    | cwl_loader:load_cwl_from_yaml:174 - CWL document successfully dereferenced! Now verifying steps[].run integrity...\n</pre> <pre>2025-09-24 07:48:01.384 | DEBUG    | cwl_loader:load_cwl_from_yaml:178 - All steps[].run link are resolvable! \n</pre> <pre>2025-09-24 07:48:01.384 | DEBUG    | cwl_loader:load_cwl_from_yaml:181 - Sorting Process instances by dependencies....\n</pre> <pre>2025-09-24 07:48:01.385 | DEBUG    | cwl_loader:load_cwl_from_yaml:183 - Sorting process is over.\n</pre> <pre>2025-09-24 07:48:01.385 | DEBUG    | cwl_loader:_load_cwl_from_stream:243 - Stream from https://raw.githubusercontent.com/eoap/how-to/refs/heads/main/cwl-workflows/conditional-workflows.cwl successfully load!\n</pre> In\u00a0[2]: Copied! <pre>from cwl2puml import (\n    to_puml,\n    DiagramType\n)\nfrom cwl_utils.parser import InputEnumSchema\nfrom io import (\n    StringIO,\n    BytesIO\n)\nfrom IPython.display import display_png\nfrom plantuml import deflate_and_encode\nfrom PIL import Image\nfrom urllib.request import urlopen\n\ndef render(\n    diagram_type: DiagramType,\n    debug: bool = False\n):\n    out = StringIO()\n    to_puml(\n        cwl_document=cwl_document,\n        workflow_id='main', # 'main' by default, but define it for demo purposes\n        diagram_type=diagram_type,\n        output_stream=out\n    )\n\n    clear_output = out.getvalue()\n\n    if debug:\n        print(clear_output)\n\n    encoded = deflate_and_encode(clear_output)\n    diagram_url = f\"https://uml.planttext.com/plantuml/png/{encoded}\"\n\n    with urlopen(diagram_url) as url:\n        img = Image.open(BytesIO(url.read()))\n    display_png(img)\n</pre> from cwl2puml import (     to_puml,     DiagramType ) from cwl_utils.parser import InputEnumSchema from io import (     StringIO,     BytesIO ) from IPython.display import display_png from plantuml import deflate_and_encode from PIL import Image from urllib.request import urlopen  def render(     diagram_type: DiagramType,     debug: bool = False ):     out = StringIO()     to_puml(         cwl_document=cwl_document,         workflow_id='main', # 'main' by default, but define it for demo purposes         diagram_type=diagram_type,         output_stream=out     )      clear_output = out.getvalue()      if debug:         print(clear_output)      encoded = deflate_and_encode(clear_output)     diagram_url = f\"https://uml.planttext.com/plantuml/png/{encoded}\"      with urlopen(diagram_url) as url:         img = Image.open(BytesIO(url.read()))     display_png(img) In\u00a0[3]: Copied! <pre>render(DiagramType.ACTIVITY)\n</pre> render(DiagramType.ACTIVITY) In\u00a0[4]: Copied! <pre>render(DiagramType.COMPONENT)\n</pre> render(DiagramType.COMPONENT) In\u00a0[5]: Copied! <pre>render(DiagramType.CLASS)\n</pre> render(DiagramType.CLASS) In\u00a0[6]: Copied! <pre>render(DiagramType.SEQUENCE)\n</pre> render(DiagramType.SEQUENCE) In\u00a0[7]: Copied! <pre>render(DiagramType.STATE)\n</pre> render(DiagramType.STATE)"},{"location":"examples/#simple-example","title":"Simple Example\u00b6","text":"<p>Let's have a look at the different PlantUML diagrams that the <code>cwl2puml</code> APIs are able to generate, given, for example, the conditional-workflows Workflow.</p>"},{"location":"examples/#1-parsing","title":"1. Parsing\u00b6","text":"<p>It is needed to read first a CWL document from a remote public URL:</p>"},{"location":"examples/#2-plantuml-diagrams","title":"2. PlantUML diagrams\u00b6","text":"<p>The samples below show how to render CWL document to a specific PlantUML diagram:</p>"},{"location":"examples/#21-activity-diagram","title":"2.1 Activity diagram\u00b6","text":"<p>The activity diagram represents the overall CWL document instructions.</p>"},{"location":"examples/#22-component-diagram","title":"2.2 Component diagram\u00b6","text":"<p>The component diagram represents the CWL document like chips on a motherboard.</p>"},{"location":"examples/#23-class-diagram","title":"2.3 Class diagram\u00b6","text":"<p>The class diagram represents the CWL document like specifications of the previously illustrated chips on a motherboard.</p>"},{"location":"examples/#24-sequence-diagram","title":"2.4 Sequence diagram\u00b6","text":"<p>The sequence diagram represents how the previously illustrated chips on a motherboard are triggered and interact with each other.</p>"},{"location":"examples/#25-state-diagram","title":"2.5 State diagram\u00b6","text":"<p>The state diagram represents the dependencies between the inputs/outputs of the previously illustrated chips on a motherboard.</p>"},{"location":"patterns/","title":"The 12 Patterns diagrams","text":"In\u00a0[1]: Copied! <pre>pip install eoap_cwlwrap\n</pre> pip install eoap_cwlwrap <pre>Requirement already satisfied: eoap_cwlwrap in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (0.16.0)\r\nRequirement already satisfied: click&gt;=8.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from eoap_cwlwrap) (8.2.1)\r\nRequirement already satisfied: cwl-loader&gt;=0.9.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from eoap_cwlwrap) (0.10.0)\r\nRequirement already satisfied: cwl-utils&gt;=0.38 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from eoap_cwlwrap) (0.40)\r\nRequirement already satisfied: cwltool&gt;=3.1.20250110105449 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from eoap_cwlwrap) (3.1.20250715140722)\r\nRequirement already satisfied: loguru in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from eoap_cwlwrap) (0.7.3)\r\nRequirement already satisfied: ruamel-yaml&gt;=0.18.15 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-loader&gt;=0.9.0-&gt;eoap_cwlwrap) (0.18.15)\r\nRequirement already satisfied: cwl-upgrader&gt;=1.2.3 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (1.2.12)\r\nRequirement already satisfied: packaging in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (25.0)\r\nRequirement already satisfied: rdflib in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (7.1.4)\r\nRequirement already satisfied: requests in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (2.32.5)\r\nRequirement already satisfied: schema-salad&lt;9,&gt;=8.8.20250205075315 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (8.9.20250723145140)\r\nRequirement already satisfied: ruamel.yaml.clib&gt;=0.2.7 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from ruamel-yaml&gt;=0.18.15-&gt;cwl-loader&gt;=0.9.0-&gt;eoap_cwlwrap) (0.2.14)\r\nRequirement already satisfied: mistune&lt;3.1,&gt;=3 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from schema-salad&lt;9,&gt;=8.8.20250205075315-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (3.0.2)\r\nRequirement already satisfied: CacheControl&lt;0.15,&gt;=0.13.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from CacheControl[filecache]&lt;0.15,&gt;=0.13.1-&gt;schema-salad&lt;9,&gt;=8.8.20250205075315-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (0.14.3)\r\nRequirement already satisfied: mypy_extensions in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from schema-salad&lt;9,&gt;=8.8.20250205075315-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (1.1.0)\r\nRequirement already satisfied: msgpack&lt;2.0.0,&gt;=0.5.2 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from CacheControl&lt;0.15,&gt;=0.13.1-&gt;CacheControl[filecache]&lt;0.15,&gt;=0.13.1-&gt;schema-salad&lt;9,&gt;=8.8.20250205075315-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (1.1.1)\r\nRequirement already satisfied: filelock&gt;=3.8.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from CacheControl[filecache]&lt;0.15,&gt;=0.13.1-&gt;schema-salad&lt;9,&gt;=8.8.20250205075315-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (3.19.1)\r\nRequirement already satisfied: pyparsing&lt;4,&gt;=2.1.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from rdflib-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (3.2.5)\r\nRequirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwl-upgrader&gt;=1.2.3-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (80.9.0)\r\nRequirement already satisfied: prov==1.5.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (1.5.1)\r\nRequirement already satisfied: psutil&gt;=5.6.6 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (7.1.0)\r\nRequirement already satisfied: coloredlogs in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (15.0.1)\r\nRequirement already satisfied: pydot&gt;=1.4.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (4.0.1)\r\nRequirement already satisfied: argcomplete&gt;=1.12.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (3.6.2)\r\nRequirement already satisfied: spython&gt;=0.3.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (0.3.14)\r\nRequirement already satisfied: rich-argparse in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (1.7.1)\r\nRequirement already satisfied: lxml in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from prov==1.5.1-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (6.0.2)\r\nRequirement already satisfied: networkx in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from prov==1.5.1-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (3.5)\r\nRequirement already satisfied: python-dateutil in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from prov==1.5.1-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (2.9.0.post0)\r\nRequirement already satisfied: six&gt;=1.9.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from prov==1.5.1-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (1.17.0)\r\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from requests-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (3.4.3)\r\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from requests-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (3.10)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from requests-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (2.5.0)\r\nRequirement already satisfied: certifi&gt;=2017.4.17 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from requests-&gt;cwl-utils&gt;=0.38-&gt;eoap_cwlwrap) (2025.8.3)\r\n</pre> <pre>Requirement already satisfied: humanfriendly&gt;=9.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from coloredlogs-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (10.0)\r\nRequirement already satisfied: rich&gt;=11.0.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from rich-argparse-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (14.1.0)\r\nRequirement already satisfied: markdown-it-py&gt;=2.2.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from rich&gt;=11.0.0-&gt;rich-argparse-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (4.0.0)\r\nRequirement already satisfied: pygments&lt;3.0.0,&gt;=2.13.0 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from rich&gt;=11.0.0-&gt;rich-argparse-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (2.19.2)\r\nRequirement already satisfied: mdurl~=0.1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from markdown-it-py&gt;=2.2.0-&gt;rich&gt;=11.0.0-&gt;rich-argparse-&gt;cwltool&gt;=3.1.20250110105449-&gt;eoap_cwlwrap) (0.1.2)\r\n</pre> <pre>Note: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from cwl2puml import (\n    to_puml,\n    DiagramType\n)\nfrom eoap_cwlwrap import wrap_locations\nfrom io import (\n    StringIO,\n    BytesIO\n)\nfrom IPython.display import (\n    display_markdown,\n    display_png,\n    Markdown\n)\nfrom plantuml import deflate_and_encode\nfrom PIL import Image\nfrom typing import List\nfrom urllib.request import urlopen\nfrom loguru import logger\nimport sys\n\nlogger.remove() #remove the old handler. Else, the old one will work along with the new one you've added below'\nlogger.add(sys.stderr, level=\"CRITICAL\")\n\nbase_url = 'https://raw.githubusercontent.com/eoap/application-package-patterns/refs/heads/main'\ndirectory_stage_in = f\"{base_url}/templates/stage-in.cwl\"\nfile_stage_in = f\"{base_url}/templates/stage-in-file.cwl\"\nstage_out_cwl = f\"{base_url}/templates/stage-out.cwl\"\n\ndebug = False\n\nfor pattern_index in range(1, 13, 1):\n    display_markdown(Markdown(f\"# Pattern {pattern_index}\"))\n\n    workflow_id = f\"pattern-{pattern_index}\"\n    workflows_cwl = f\"{base_url}/cwl-workflow/{workflow_id}.cwl\"\n\n    cwl_document = wrap_locations(\n        workflows=workflows_cwl,\n        workflow_id=workflow_id,\n        directory_stage_in=directory_stage_in,\n        file_stage_in=file_stage_in,\n        stage_out=stage_out_cwl\n    )\n\n    for diagram_type in DiagramType:\n        display_markdown(Markdown(f\"## {diagram_type.name.lower()} diagram\"))\n\n        out = StringIO()\n        to_puml( # workflow_id='main' by default\n            cwl_document=cwl_document,\n            diagram_type=diagram_type,\n            output_stream=out\n        )\n\n        clear_output = out.getvalue()\n\n        if debug:\n            print(clear_output)\n\n        encoded = deflate_and_encode(clear_output)\n        diagram_url = f\"https://uml.planttext.com/plantuml/png/{encoded}\"\n\n        with urlopen(diagram_url) as url:\n            img = Image.open(BytesIO(url.read()))\n        display_png(img)\n</pre> from cwl2puml import (     to_puml,     DiagramType ) from eoap_cwlwrap import wrap_locations from io import (     StringIO,     BytesIO ) from IPython.display import (     display_markdown,     display_png,     Markdown ) from plantuml import deflate_and_encode from PIL import Image from typing import List from urllib.request import urlopen from loguru import logger import sys  logger.remove() #remove the old handler. Else, the old one will work along with the new one you've added below' logger.add(sys.stderr, level=\"CRITICAL\")  base_url = 'https://raw.githubusercontent.com/eoap/application-package-patterns/refs/heads/main' directory_stage_in = f\"{base_url}/templates/stage-in.cwl\" file_stage_in = f\"{base_url}/templates/stage-in-file.cwl\" stage_out_cwl = f\"{base_url}/templates/stage-out.cwl\"  debug = False  for pattern_index in range(1, 13, 1):     display_markdown(Markdown(f\"# Pattern {pattern_index}\"))      workflow_id = f\"pattern-{pattern_index}\"     workflows_cwl = f\"{base_url}/cwl-workflow/{workflow_id}.cwl\"      cwl_document = wrap_locations(         workflows=workflows_cwl,         workflow_id=workflow_id,         directory_stage_in=directory_stage_in,         file_stage_in=file_stage_in,         stage_out=stage_out_cwl     )      for diagram_type in DiagramType:         display_markdown(Markdown(f\"## {diagram_type.name.lower()} diagram\"))          out = StringIO()         to_puml( # workflow_id='main' by default             cwl_document=cwl_document,             diagram_type=diagram_type,             output_stream=out         )          clear_output = out.getvalue()          if debug:             print(clear_output)          encoded = deflate_and_encode(clear_output)         diagram_url = f\"https://uml.planttext.com/plantuml/png/{encoded}\"          with urlopen(diagram_url) as url:             img = Image.open(BytesIO(url.read()))         display_png(img)"},{"location":"patterns/#the-12-patterns-diagrams","title":"The 12 Patterns diagrams\u00b6","text":""},{"location":"patterns/#pattern-1","title":"Pattern 1\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-2","title":"Pattern 2\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-3","title":"Pattern 3\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-4","title":"Pattern 4\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-5","title":"Pattern 5\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-6","title":"Pattern 6\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-7","title":"Pattern 7\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-8","title":"Pattern 8\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-9","title":"Pattern 9\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-10","title":"Pattern 10\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-11","title":"Pattern 11\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"patterns/#pattern-12","title":"Pattern 12\u00b6","text":""},{"location":"patterns/#activity-diagram","title":"activity diagram\u00b6","text":""},{"location":"patterns/#component-diagram","title":"component diagram\u00b6","text":""},{"location":"patterns/#class-diagram","title":"class diagram\u00b6","text":""},{"location":"patterns/#sequence-diagram","title":"sequence diagram\u00b6","text":""},{"location":"patterns/#state-diagram","title":"state diagram\u00b6","text":""},{"location":"api/latest/cwl2puml/","title":"Module cwl2puml","text":"<p>CWL2PlantUML aims to deliver a simple yet powerful CLI tool to ingest CWL Workflows and generate PantUM diagrams.</p> <p>CWL2PlantUML (c) 2025</p> <p>CWL2PlantUML is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p>You should have received a copy of the license along with this work. If not, see https://creativecommons.org/licenses/by-sa/4.0/.</p>"},{"location":"api/latest/cwl2puml/#sub-modules","title":"Sub-modules","text":"<ul> <li>cwl2puml.cli</li> </ul>"},{"location":"api/latest/cwl2puml/#functions","title":"Functions","text":""},{"location":"api/latest/cwl2puml/#to_puml","title":"to_puml","text":"<pre><code>def to_puml(\n    cwl_document: Union[cwl_utils.parser.cwl_v1_0.Workflow, cwl_utils.parser.cwl_v1_1.Workflow, cwl_utils.parser.cwl_v1_2.Workflow, cwl_utils.parser.cwl_v1_0.CommandLineTool, cwl_utils.parser.cwl_v1_1.CommandLineTool, cwl_utils.parser.cwl_v1_2.CommandLineTool, cwl_utils.parser.cwl_v1_0.ExpressionTool, cwl_utils.parser.cwl_v1_1.ExpressionTool, cwl_utils.parser.cwl_v1_2.ExpressionTool, cwl_utils.parser.cwl_v1_2.Operation, List[Union[cwl_utils.parser.cwl_v1_0.Workflow, cwl_utils.parser.cwl_v1_1.Workflow, cwl_utils.parser.cwl_v1_2.Workflow, cwl_utils.parser.cwl_v1_0.CommandLineTool, cwl_utils.parser.cwl_v1_1.CommandLineTool, cwl_utils.parser.cwl_v1_2.CommandLineTool, cwl_utils.parser.cwl_v1_0.ExpressionTool, cwl_utils.parser.cwl_v1_1.ExpressionTool, cwl_utils.parser.cwl_v1_2.ExpressionTool, cwl_utils.parser.cwl_v1_2.Operation]]],\n    diagram_type: cwl2puml.DiagramType,\n    output_stream: &lt;class 'TextIO'&gt;,\n    workflow_id: str = 'main'\n)\n</code></pre> <p>Converts a CWL, given its document model, to a PlantUML diagram.</p> <p>Parameters:</p> Name Type Description Default <code>cwl_document</code> <code>Processes</code> The Processes object model representing the CWL document None <code>diagram_type</code> <code>DiagramType</code> The PlantUML diagram type to render None <code>output_stream</code> <code>Stream</code> The output stream where serializing the PlantUML diagram None <p>Returns:</p> Type Description <code>None</code> none"},{"location":"api/latest/cwl2puml/#classes","title":"Classes","text":""},{"location":"api/latest/cwl2puml/#diagramtype","title":"DiagramType","text":"<pre><code>class DiagramType(\n    *args,\n    **kwds\n)\n</code></pre> <p>The supported PlantUML diagram types</p>"},{"location":"api/latest/cwl2puml/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"api/latest/cwl2puml/#class-variables","title":"Class variables","text":"<pre><code>ACTIVITY\n</code></pre> <p>Represents the PlantUML `activity' diagram</p> <pre><code>CLASS\n</code></pre> <p>Represents the PlantUML `class' diagram</p> <pre><code>COMPONENT\n</code></pre> <p>Represents the PlantUML `components' diagram</p> <pre><code>SEQUENCE\n</code></pre> <p>Represents the PlantUML `sequence' diagram</p> <pre><code>STATE\n</code></pre> <p>Represents the PlantUML `state' diagram</p> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/latest/cwl2puml/cli/","title":"Module cwl2puml.cli","text":"<p>CWL2PlantUML aims to deliver a simple yet powerful CLI tool to ingest CWL Workflows and generate PantUM diagrams.</p> <p>CWL2PlantUML (c) 2025</p> <p>CWL2PlantUML is licensed under Creative Commons Attribution-ShareAlike 4.0 International.</p> <p>You should have received a copy of the license along with this work. If not, see https://creativecommons.org/licenses/by-sa/4.0/.</p>"},{"location":"api/latest/cwl2puml/cli/#classes","title":"Classes","text":""},{"location":"api/latest/cwl2puml/cli/#imageformat","title":"ImageFormat","text":"<pre><code>class ImageFormat(\n    *args,\n    **kwds\n)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access:</li> </ul> <p>Color.RED    <ul> <li>value lookup:</li> </ul> <p>Color(1)    <ul> <li>name lookup:</li> </ul> <p>Color['RED']    <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p>"},{"location":"api/latest/cwl2puml/cli/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"api/latest/cwl2puml/cli/#class-variables","title":"Class variables","text":"<pre><code>PNG\n</code></pre> <pre><code>SVG\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"}]}